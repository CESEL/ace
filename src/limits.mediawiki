==Limits and Known Issues==

This tool doesn't catch everything, it's based on heuristics and it is NOT a reimplementation of the Java Spec. Below we describe some of the limitations of this tool. If something is missed, it becomes a false positive (unless it's in the explicitly included list). Even with these limitations, the precision and recall were still around .9 on Android, HttpClient, and Hibernate.

Note:
* ACE is designed for parsing code snippets and freeform text not entire source code files
** Scope rules are expanded to include documentation units, etc
* ACE includes elements from stacktraces

==Stuff we explicitly excluded==

* All types of property files 
** For [http://developer.android.com/guide/topics/resources/accessing-resources.html android], this includes the R.* class, which is autogenerated to all resources to be input
* System.*, java stuff, they aren't interesting
* Perhaps we should have excluded basic types? String, int, etc -- they are currently included, but aren't interesting
* enum definitions, but the enums themselves count, they aren't interesting
* annotation definitions (it's a mini language)
* standard annotation (e.g., @override) are excluded, they aren't interesting
* variables are not code elements and while we resolve them and use them as intermediaries, they aren't included in the benchmark

==known issues==
* We're sure there are other we don't know about, so please let us know
* Don't handle .class, .length, etc as in -- android.os.Build.class SO_2948606
* return type on method declarations: (not sure how I missed this, obviously didn't add too may fp) 
** trivial to add and would always get right value: String getString() { ...
* runtime type or compile type for variables: currently depends on information provided, either is right
* TODO: why does dictionary allow for trust = 1? Still not sure why I made this decision
*implements package.Class eg SO_1331719
*new Scheme ( -> add space for constructor ... SO_2642777
*would be nice to handle property files properly, for example the properties are the salient factor in SO_1713464
*chains on constructors
*annotation fqn -> @javax.persistence.PostLoad 
*package.Class var
*int x = 5, y = 1;
*this.Field
**select * from clt where trust = 10 and kind <> 'annotation';
*Undefined trust = 4 (or chained)

===Generics===
Supported when used, but
* Don't catch the innerparts of a generic class
* Don't explicitly find generics that include extends, but will sometimes pick them up on later rounds
* generics creation useful, what about Template variables like T? e.g., class Queue<T> {private LinkedList<T> items = new LinkedList<T>(); --so far templates etc are ignored, could be added to later version
** Not sure the class T should be treated, it's going to show up in many places ... future work

==Won't fix==
*Any type that contains the word 'Exception' is a kind_original exception -> don't really care about exceptions anyways
*Example of why closed world is better -> SO_1733064
*this.var.var
*chained methods that have a variable as their start instead of a type!
**select * from clt where trust_original = 4 and pqn ~ E'^[a-z]';
*SO_5259797 -> variable undef, but method finds type, only matters if we start counting vars as well
*SO_3256420->class defined, but lowercase
*SO_217070 misses "new NameValuePair[] {"
*SO_6891273 -> at org.json.JSONObject.<init>(JSONObject.java:171)
*SO_1978053 -> CONN_MGR is a defined variable, will remain undefined as a field -> final HttpClient httpClient = new HttpClient(CONN_MGR);
*SO_3808928: Perhaps we should look at the : style?  -> "DEBUG main client.DefaultHttpClient:1171 - Credentials not found",
)

==for db==
*SO_2030120
**compound method names without defining class, but above X should be included???
**just as non-qualified, short terms should be excluded


